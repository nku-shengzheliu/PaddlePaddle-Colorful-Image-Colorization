#encoding=utf8
# Copyright (c) 2021 PaddlePaddle Authors. All Rights Reserved.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import paddle
# import math
# from x2paddle.op_mapper.onnx2paddle import onnx_custom_layer as x2paddle_nn

class ONNXModel(paddle.nn.Layer):
    def __init__(self):
        super(ONNXModel, self).__init__()
        self.conv0 = paddle.nn.Conv2D(in_channels=1, out_channels=64, kernel_size=[3, 3], padding=1)
        self.relu0 = paddle.nn.ReLU()
        self.conv1 = paddle.nn.Conv2D(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=2, padding=1)
        self.relu1 = paddle.nn.ReLU()
        self.batchnorm0 = paddle.nn.BatchNorm(num_channels=64, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.conv2 = paddle.nn.Conv2D(in_channels=64, out_channels=128, kernel_size=[3, 3], padding=1)
        self.relu2 = paddle.nn.ReLU()
        self.conv3 = paddle.nn.Conv2D(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=2, padding=1)
        self.relu3 = paddle.nn.ReLU()
        self.batchnorm1 = paddle.nn.BatchNorm(num_channels=128, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.conv4 = paddle.nn.Conv2D(in_channels=128, out_channels=256, kernel_size=[3, 3], padding=1)
        self.relu4 = paddle.nn.ReLU()
        self.conv5 = paddle.nn.Conv2D(in_channels=256, out_channels=256, kernel_size=[3, 3], padding=1)
        self.relu5 = paddle.nn.ReLU()
        self.conv6 = paddle.nn.Conv2D(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=2, padding=1)
        self.relu6 = paddle.nn.ReLU()
        self.batchnorm2 = paddle.nn.BatchNorm(num_channels=256, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.conv7 = paddle.nn.Conv2D(in_channels=256, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu7 = paddle.nn.ReLU()
        self.conv8 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu8 = paddle.nn.ReLU()
        self.conv9 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu9 = paddle.nn.ReLU()
        self.batchnorm3 = paddle.nn.BatchNorm(num_channels=512, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.conv10 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=2, dilation=2)
        self.relu10 = paddle.nn.ReLU()
        self.conv11 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=2, dilation=2)
        self.relu11 = paddle.nn.ReLU()
        self.conv12 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=2, dilation=2)
        self.relu12 = paddle.nn.ReLU()
        self.batchnorm4 = paddle.nn.BatchNorm(num_channels=512, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.conv13 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=2, dilation=2)
        self.relu13 = paddle.nn.ReLU()
        self.conv14 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=2, dilation=2)
        self.relu14 = paddle.nn.ReLU()
        self.conv15 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=2, dilation=2)
        self.relu15 = paddle.nn.ReLU()
        self.batchnorm5 = paddle.nn.BatchNorm(num_channels=512, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.conv16 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu16 = paddle.nn.ReLU()
        self.conv17 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu17 = paddle.nn.ReLU()
        self.conv18 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu18 = paddle.nn.ReLU()
        self.batchnorm6 = paddle.nn.BatchNorm(num_channels=512, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.conv_trans0 = paddle.nn.Conv2DTranspose(in_channels=512, out_channels=256, kernel_size=[4, 4], stride=2, padding=1)
        self.relu19 = paddle.nn.ReLU()
        self.conv19 = paddle.nn.Conv2D(in_channels=256, out_channels=256, kernel_size=[3, 3], padding=1)
        self.relu20 = paddle.nn.ReLU()
        self.conv20 = paddle.nn.Conv2D(in_channels=256, out_channels=256, kernel_size=[3, 3], padding=1)
        self.relu21 = paddle.nn.ReLU()
        self.conv21 = paddle.nn.Conv2D(in_channels=256, out_channels=313, kernel_size=[1, 1])

    def forward(self, x2paddle_input_1):
        x2paddle_134 = paddle.full(dtype='float32', shape=[1], fill_value=0.3799999952316284)
        x2paddle_82 = self.conv0(x2paddle_input_1)
        x2paddle_83 = self.relu0(x2paddle_82)
        x2paddle_84 = self.conv1(x2paddle_83)
        x2paddle_85 = self.relu1(x2paddle_84)
        x2paddle_86 = self.batchnorm0(x2paddle_85)
        x2paddle_87 = self.conv2(x2paddle_86)
        x2paddle_88 = self.relu2(x2paddle_87)
        x2paddle_89 = self.conv3(x2paddle_88)
        x2paddle_90 = self.relu3(x2paddle_89)
        x2paddle_91 = self.batchnorm1(x2paddle_90)
        x2paddle_92 = self.conv4(x2paddle_91)
        x2paddle_93 = self.relu4(x2paddle_92)
        x2paddle_94 = self.conv5(x2paddle_93)
        x2paddle_95 = self.relu5(x2paddle_94)
        x2paddle_96 = self.conv6(x2paddle_95)
        x2paddle_97 = self.relu6(x2paddle_96)
        x2paddle_98 = self.batchnorm2(x2paddle_97)
        x2paddle_99 = self.conv7(x2paddle_98)
        x2paddle_100 = self.relu7(x2paddle_99)
        x2paddle_101 = self.conv8(x2paddle_100)
        x2paddle_102 = self.relu8(x2paddle_101)
        x2paddle_103 = self.conv9(x2paddle_102)
        x2paddle_104 = self.relu9(x2paddle_103)
        x2paddle_105 = self.batchnorm3(x2paddle_104)
        x2paddle_106 = self.conv10(x2paddle_105)
        x2paddle_107 = self.relu10(x2paddle_106)
        x2paddle_108 = self.conv11(x2paddle_107)
        x2paddle_109 = self.relu11(x2paddle_108)
        x2paddle_110 = self.conv12(x2paddle_109)
        x2paddle_111 = self.relu12(x2paddle_110)
        x2paddle_112 = self.batchnorm4(x2paddle_111)
        x2paddle_113 = self.conv13(x2paddle_112)
        x2paddle_114 = self.relu13(x2paddle_113)
        x2paddle_115 = self.conv14(x2paddle_114)
        x2paddle_116 = self.relu14(x2paddle_115)
        x2paddle_117 = self.conv15(x2paddle_116)
        x2paddle_118 = self.relu15(x2paddle_117)
        x2paddle_119 = self.batchnorm5(x2paddle_118)
        x2paddle_120 = self.conv16(x2paddle_119)
        x2paddle_121 = self.relu16(x2paddle_120)
        x2paddle_122 = self.conv17(x2paddle_121)
        x2paddle_123 = self.relu17(x2paddle_122)
        x2paddle_124 = self.conv18(x2paddle_123)
        x2paddle_125 = self.relu18(x2paddle_124)
        x2paddle_126 = self.batchnorm6(x2paddle_125)
        x2paddle_127 = self.conv_trans0(x2paddle_126)
        x2paddle_128 = self.relu19(x2paddle_127)
        x2paddle_129 = self.conv19(x2paddle_128)
        x2paddle_130 = self.relu20(x2paddle_129)
        x2paddle_131 = self.conv20(x2paddle_130)
        x2paddle_132 = self.relu21(x2paddle_131)
        x2paddle_133 = self.conv21(x2paddle_132)
        x2paddle_135 = paddle.divide(x=x2paddle_133, y=x2paddle_134)
        return x2paddle_135


class ECCVGenerator(paddle.nn.Layer):
    def __init__(self):
        super(ECCVGenerator, self).__init__()
        self.x2paddle_149 = self.create_parameter(shape=[4], attr='x2paddle_149', dtype='float32', default_initializer=paddle.nn.initializer.Constant(value=0.0))
        self.conv0 = paddle.nn.Conv2D(in_channels=1, out_channels=64, kernel_size=[3, 3], padding=1)
        self.relu0 = paddle.nn.ReLU()
        self.conv1 = paddle.nn.Conv2D(in_channels=64, out_channels=64, kernel_size=[3, 3], stride=2, padding=1)
        self.relu1 = paddle.nn.ReLU()
        self.batchnorm0 = paddle.nn.BatchNorm(num_channels=64, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.conv2 = paddle.nn.Conv2D(in_channels=64, out_channels=128, kernel_size=[3, 3], padding=1)
        self.relu2 = paddle.nn.ReLU()
        self.conv3 = paddle.nn.Conv2D(in_channels=128, out_channels=128, kernel_size=[3, 3], stride=2, padding=1)
        self.relu3 = paddle.nn.ReLU()
        self.batchnorm1 = paddle.nn.BatchNorm(num_channels=128, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.conv4 = paddle.nn.Conv2D(in_channels=128, out_channels=256, kernel_size=[3, 3], padding=1)
        self.relu4 = paddle.nn.ReLU()
        self.conv5 = paddle.nn.Conv2D(in_channels=256, out_channels=256, kernel_size=[3, 3], padding=1)
        self.relu5 = paddle.nn.ReLU()
        self.conv6 = paddle.nn.Conv2D(in_channels=256, out_channels=256, kernel_size=[3, 3], stride=2, padding=1)
        self.relu6 = paddle.nn.ReLU()
        self.batchnorm2 = paddle.nn.BatchNorm(num_channels=256, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.conv7 = paddle.nn.Conv2D(in_channels=256, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu7 = paddle.nn.ReLU()
        self.conv8 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu8 = paddle.nn.ReLU()
        self.conv9 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu9 = paddle.nn.ReLU()
        self.batchnorm3 = paddle.nn.BatchNorm(num_channels=512, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.conv10 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=2, dilation=2)
        self.relu10 = paddle.nn.ReLU()
        self.conv11 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=2, dilation=2)
        self.relu11 = paddle.nn.ReLU()
        self.conv12 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=2, dilation=2)
        self.relu12 = paddle.nn.ReLU()
        self.batchnorm4 = paddle.nn.BatchNorm(num_channels=512, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.conv13 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=2, dilation=2)
        self.relu13 = paddle.nn.ReLU()
        self.conv14 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=2, dilation=2)
        self.relu14 = paddle.nn.ReLU()
        self.conv15 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=2, dilation=2)
        self.relu15 = paddle.nn.ReLU()
        self.batchnorm5 = paddle.nn.BatchNorm(num_channels=512, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.conv16 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu16 = paddle.nn.ReLU()
        self.conv17 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu17 = paddle.nn.ReLU()
        self.conv18 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.relu18 = paddle.nn.ReLU()
        self.batchnorm6 = paddle.nn.BatchNorm(num_channels=512, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.conv_trans0 = paddle.nn.Conv2DTranspose(in_channels=512, out_channels=256, kernel_size=[4, 4], stride=2, padding=1)
        self.relu19 = paddle.nn.ReLU()
        self.conv19 = paddle.nn.Conv2D(in_channels=256, out_channels=256, kernel_size=[3, 3], padding=1)
        self.relu20 = paddle.nn.ReLU()
        self.conv20 = paddle.nn.Conv2D(in_channels=256, out_channels=256, kernel_size=[3, 3], padding=1)
        self.relu21 = paddle.nn.ReLU()
        self.conv21 = paddle.nn.Conv2D(in_channels=256, out_channels=313, kernel_size=[1, 1])
        self.softmax0 = paddle.nn.Softmax(axis=3)
        self.conv22 = paddle.nn.Conv2D(in_channels=313, out_channels=2, kernel_size=[1, 1], bias_attr=False)

    def forward(self, x2paddle_input_l):
        x2paddle_149 = self.x2paddle_149
        x2paddle_83 = paddle.full(dtype='float32', shape=[1], fill_value=50.0)
        x2paddle_85 = paddle.full(dtype='float32', shape=[1], fill_value=100.0)
        x2paddle_147 = paddle.full(dtype='float32', shape=[1], fill_value=110.0)
        x2paddle_84 = paddle.subtract(x=x2paddle_input_l, y=x2paddle_83)
        x2paddle_86 = paddle.divide(x=x2paddle_84, y=x2paddle_85)
        x2paddle_87 = self.conv0(x2paddle_86)
        x2paddle_88 = self.relu0(x2paddle_87)
        x2paddle_89 = self.conv1(x2paddle_88)
        x2paddle_90 = self.relu1(x2paddle_89)
        x2paddle_91 = self.batchnorm0(x2paddle_90)
        x2paddle_92 = self.conv2(x2paddle_91)
        x2paddle_93 = self.relu2(x2paddle_92)
        x2paddle_94 = self.conv3(x2paddle_93)
        x2paddle_95 = self.relu3(x2paddle_94)
        x2paddle_96 = self.batchnorm1(x2paddle_95)
        x2paddle_97 = self.conv4(x2paddle_96)
        x2paddle_98 = self.relu4(x2paddle_97)
        x2paddle_99 = self.conv5(x2paddle_98)
        x2paddle_100 = self.relu5(x2paddle_99)
        x2paddle_101 = self.conv6(x2paddle_100)
        x2paddle_102 = self.relu6(x2paddle_101)
        x2paddle_103 = self.batchnorm2(x2paddle_102)
        x2paddle_104 = self.conv7(x2paddle_103)
        x2paddle_105 = self.relu7(x2paddle_104)
        x2paddle_106 = self.conv8(x2paddle_105)
        x2paddle_107 = self.relu8(x2paddle_106)
        x2paddle_108 = self.conv9(x2paddle_107)
        x2paddle_109 = self.relu9(x2paddle_108)
        x2paddle_110 = self.batchnorm3(x2paddle_109)
        x2paddle_111 = self.conv10(x2paddle_110)
        x2paddle_112 = self.relu10(x2paddle_111)
        x2paddle_113 = self.conv11(x2paddle_112)
        x2paddle_114 = self.relu11(x2paddle_113)
        x2paddle_115 = self.conv12(x2paddle_114)
        x2paddle_116 = self.relu12(x2paddle_115)
        x2paddle_117 = self.batchnorm4(x2paddle_116)
        x2paddle_118 = self.conv13(x2paddle_117)
        x2paddle_119 = self.relu13(x2paddle_118)
        x2paddle_120 = self.conv14(x2paddle_119)
        x2paddle_121 = self.relu14(x2paddle_120)
        x2paddle_122 = self.conv15(x2paddle_121)
        x2paddle_123 = self.relu15(x2paddle_122)
        x2paddle_124 = self.batchnorm5(x2paddle_123)
        x2paddle_125 = self.conv16(x2paddle_124)
        x2paddle_126 = self.relu16(x2paddle_125)
        x2paddle_127 = self.conv17(x2paddle_126)
        x2paddle_128 = self.relu17(x2paddle_127)
        x2paddle_129 = self.conv18(x2paddle_128)
        x2paddle_130 = self.relu18(x2paddle_129)
        x2paddle_131 = self.batchnorm6(x2paddle_130)
        x2paddle_132 = self.conv_trans0(x2paddle_131)
        x2paddle_133 = self.relu19(x2paddle_132)
        x2paddle_134 = self.conv19(x2paddle_133)
        x2paddle_135 = self.relu20(x2paddle_134)
        x2paddle_136 = self.conv20(x2paddle_135)
        x2paddle_137 = self.relu21(x2paddle_136)
        x2paddle_138 = self.conv21(x2paddle_137)
        x2paddle_139 = paddle.transpose(x=x2paddle_138, perm=[0, 3, 2, 1])
        x2paddle_140 = self.softmax0(x2paddle_139)
        x2paddle_141 = paddle.transpose(x=x2paddle_140, perm=[0, 3, 2, 1])
        x2paddle_142 = self.conv22(x2paddle_141)
        x2paddle_149 = paddle.slice(input=x2paddle_149, axes=[0], starts=[2], ends=[4])
        x2paddle_146 = paddle.nn.functional.interpolate(x=x2paddle_142, scale_factor=x2paddle_149, align_corners=True, mode='bilinear', align_mode=1)
        x2paddle_148 = paddle.multiply(x=x2paddle_146, y=x2paddle_147)
        return x2paddle_148


def main(x2paddle_input_1):
    # There are 1 inputs.
    # x2paddle_input_1: shape-[1, 1, 224, 224], type-float32.
    paddle.disable_static()
    params = paddle.load('saved_models/from_torch/model.pdparams')
    model = ONNXModel()
    model.set_dict(params, use_structured_name=True)
    model.eval()
    out = model(x2paddle_input_1)
    return out
